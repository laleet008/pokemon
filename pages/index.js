import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { FaArrowLeft, FaArrowRight } from "react-icons/fa";
import Skeleton from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";

import Card from "../components/Card";
import Sidebar from "../components/Sidebar";
import styles from "../styles/Home.module.css";
import { getPokemon, getPokemons } from "./api/helper";

const pokemonUrl = "https://pokeapi.co/api/v2/pokemon?offset=0&limit=21";

export default function Home() {
  const [allPokemons, setAllPokemons] = useState([]);
  const [pokemonData, setPokemonData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [nextUrl, setNextUrl] = useState("");
  const [prevUrl, setPrevUrl] = useState("");
  const [searchQuery, setSearchQuery] = useState("");

  const [checkedTypes, setCheckedTypes] = useState([]);

  useEffect(() => {
    async function fetchData() {
      let res = await getPokemons(pokemonUrl);
      setNextUrl(res.next);
      setPrevUrl(res.previous);
      await fetchPokemon(res.results);
      setLoading(false);
    }
    fetchData();
  }, []);

  const fetchPokemon = async (data) => {
    let currentPokemon = await Promise.all(
      data.map(async (pokemon) => {
        let pokemonDetails = await getPokemon(pokemon);
        return pokemonDetails;
      })
    );
    setPokemonData(currentPokemon);
    setAllPokemons(currentPokemon);
  };

  const next = async () => {
    setCheckedTypes("");
    setLoading(true);

    let data = await getPokemons(nextUrl);
    await fetchPokemon(data.results);
    setNextUrl(data.next);
    setPrevUrl(data.previous);
    setLoading(false);
  };

  const prev = async () => {
    if (!prevUrl) return;
    setCheckedTypes("");
    setLoading(true);

    let data = await getPokemons(prevUrl);
    await fetchPokemon(data.results);
    setNextUrl(data.next);
    setPrevUrl(data.previous);

    setLoading(false);
  };

  useEffect(() => {
    const newPokemonData = allPokemons.filter(
      (pokemon) =>
        pokemon.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        pokemon.types[0].type.name
          .toLowerCase()
          .includes(searchQuery.toLowerCase())
    );
    setPokemonData(newPokemonData);
    // setPokemonData(filterPokemonData);
  }, [allPokemons, searchQuery]);

  useEffect(() => {
    const filteredPokemonArray = []; 
    for (let pokemon of allPokemons) {
      // console.log(pokemon);
      if (
        searchQuery.length > 0 &&
        !pokemon.name.toLowerCase().includes(searchQuery.toLowerCase())
      ) {
        continue;
      }

      if (
        checkedTypes.length > 0 &&
        !checkedTypes.includes(pokemon.types[0].type.name)
      ) {
        continue;
      }

      filteredPokemonArray.push(pokemon);
    }

    setPokemonData(filteredPokemonArray);
  }, [allPokemons, checkedTypes, searchQuery]);

  const onInputChange = (e) => {
    e.preventDefault();
    setSearchQuery(e.target.value);
  };

  const onSelect = (e) => {
    let selected = e.target.value;
    if (!checkedTypes.includes(selected)) {
      setCheckedTypes([...checkedTypes, selected]);
    } else {
      const filterTypes = checkedTypes.filter((type) => type !== selected);
      setCheckedTypes(filterTypes);
    }
  };

  return (
    <div>
      <Head>
        <title>Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="favicon.ico" />
      </Head>
      <main>
        <div className="py-4">
          <div className="center-everything h-20">
            <Image
              src="https://www.pngall.com/wp-content/uploads/13/Pokemon-Logo-PNG-Images-HD.png"
              alt="pokemon"
              height={170}
              width={300}
            />
          </div>
          <p className="center-everything h-12">
            Total pokemon found:
            {pokemonData && pokemonData.length}
          </p>

          <div className="main__container">
            <div className="sidebar-container  ">
              <Sidebar
                allPokemons={allPokemons}
                searchQuery={searchQuery}
                onInputChange={onInputChange}
                onSelect={onSelect}
                className=" "
              />
            </div>

            <div className="flex justify-center w-full items-center">
              {loading ? (
                <Skeleton count={1} height={100} />
              ) : (
                <div className="w-full">
                  <div className="flex flex-wrap w-full h-full">
                    {pokemonData &&
                      pokemonData.map((pokemon) => (
                        <Card key={pokemon.id} pokemon={pokemon} />
                      ))}
                  </div>
                </div>
              )}
            </div>
          </div>
          <div className="flex justify-center md:mr-28 my-12 ">
            <div className="flex w-[180px] justify-between">
              <button onClick={prev} className="button-flex">
                <FaArrowLeft /> Prev
              </button>
              <button onClick={next} className="button-flex">
                Next <FaArrowRight />
              </button>
            </div>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>{/* footer */}</footer>
    </div>
  );
}
